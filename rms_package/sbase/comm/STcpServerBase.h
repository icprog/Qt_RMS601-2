/**
 *
 * 文 件 名 : STcpServerBase.h
 * 创建日期 : 2011-11-8 17:54
 * 作    者 : 邵凯田(skt001@163.com)
 * 修改日期 : $Date: $
 * 当前版本 : $Revision: $
 * 功能描述 : 
 * 修改记录 : 
 *            $Log: $
 *
 **/

#ifndef __SKT_TCPSERVER_BASE_H__
#define __SKT_TCPSERVER_BASE_H__

#include "STcpCommBase.h"

class STcpServerBase;

//////////////////////////////////////////////////////////////////////////
// 名    称:  STcpServerSession
// 作    者:  邵凯田
// 创建时间:  2011-11-11 8:46
// 描    述:  服务会话类
//////////////////////////////////////////////////////////////////////////
class STcpServerSession : public STcpCommBase
{
public:
	friend class STcpServerBase;
	STcpServerSession();
	~STcpServerSession();

	//对象是否有效
	bool IsValid(){return m_ValidWord==0xeb903469;};
	
	////////////////////////////////////////////////////////////////////////
	// 描    述:  添加数据到发送队列，在发送完成后释放pPackage对象
	// 作    者:  邵凯田
	// 创建时间:  2011-11-10 12:40
	// 参数说明:  @pPackage待发送报文
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void AddToSend(stuSTcpPackage *pPackage);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  向当前会话对端立即发送一帧报文（不通过发送缓冲区），只能在OnRecvFrame函数中使用，否则线程不安全
	// 作    者:  邵凯田
	// 创建时间:  2012-01-17 13:46
	// 参数说明:  @pPackage表示待发送的数据包
	//            @bAutoDelPackage表示是否在使用完毕后自动删除pPackage
	// 返 回 值:  true表示发送成功,false表示发送失败
	//////////////////////////////////////////////////////////////////////////
	bool SendFrame(stuSTcpPackage *pPackage,bool bAutoDelPackage=false);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  向当前会话对端立即发送一帧报文（不通过发送缓冲区），只能在OnRecvFrame函数中使用，否则线程不安全
	// 作    者:  邵凯田
	// 创建时间:  2012-01-17 13:57
	// 参数说明:  @sHead表示报文头字符串
	//            @wFrameType表示报文类型
	//            @pAsduBuffer表示ASDU内容缓冲区，当pAsduBuffer为NULL且iAsduLen不为0时，表示使用预设的发送缓冲区
	//            @iAsduLen表示ASDU数据长度
	// 返 回 值:  true表示发送成功,false表示发送失败
	//////////////////////////////////////////////////////////////////////////
	bool SendFrame(SString &sHead,WORD wFrameType=0,BYTE *pAsduBuffer=NULL,int iAsduLen=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  向当前会话对端立即发送一帧报文（不通过发送缓冲区），只能在OnRecvFrame函数中使用，否则线程不安全
	// 作    者:  邵凯田
	// 创建时间:  2012-01-17 13:57
	// 参数说明:  @wFrameType表示报文类型
	//            @pAsduBuffer表示ASDU内容缓冲区，当pAsduBuffer为NULL且iAsduLen不为0时，表示使用预设的发送缓冲区
	//            @iAsduLen表示ASDU数据长度
	// 返 回 值:  true表示发送成功,false表示发送失败
	//////////////////////////////////////////////////////////////////////////
	bool SendFrame(WORD wFrameType,BYTE *pAsduBuffer=NULL,int iAsduLen=0);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  检索接收队列中的报文
	// 作    者:  邵凯田
	// 创建时间:  2011-11-10 21:32
	// 参数说明:  
	// 返 回 值:  stuSTcpPackage*
	//////////////////////////////////////////////////////////////////////////
	stuSTcpPackage* SearchRecvPackage();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  通过报文头字符串中的act属性检索接收队列中的报文
	// 作    者:  邵凯田
	// 创建时间:  2011-11-10 21:32
	// 参数说明:  @act表示待查的报文
	// 返 回 值:  stuSTcpPackage*
	//////////////////////////////////////////////////////////////////////////
	stuSTcpPackage* SearchRecvPackage(SString act);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  通过报文类型检索接收队列中的报文
	// 作    者:  邵凯田
	// 创建时间:  2011-11-10 21:32
	// 参数说明:  @wFrameType表示
	// 返 回 值:  stuSTcpPackage*
	//////////////////////////////////////////////////////////////////////////
	stuSTcpPackage* SearchRecvPackage(WORD wFrameType);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  会话加锁
	// 作    者:  邵凯田
	// 创建时间:  2011-11-11 13:53
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	inline void lock(){m_Lock.lock();};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  会话解锁
	// 作    者:  邵凯田
	// 创建时间:  2011-11-11 13:53
	// 参数说明:  void
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	inline void unlock(){m_Lock.unlock();};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  是否通讯处于连接状态
	// 作    者:  邵凯田
	// 创建时间:  2011-11-12 22:13
	// 参数说明:   void
	// 返 回 值:  true表示连接中,false表示未连接
	//////////////////////////////////////////////////////////////////////////
	inline bool IsConnected(){return m_pSocket==NULL?false:m_pSocket->IsConnected();};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取Socket指针
	// 作    者:  邵凯田
	// 创建时间:  2012-4-26 13:55
	// 参数说明:  void
	// 返 回 值:  SSocket*
	//////////////////////////////////////////////////////////////////////////
	inline SSocket* GetSessionSock(){return m_pSocket;}

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取发送缓冲区
	// 作    者:  邵凯田
	// 创建时间:  2012-11-17 12:09
	// 参数说明:  void
	// 返 回 值:  SPtrList<stuSTcpPackage>*
	//////////////////////////////////////////////////////////////////////////
	inline SPtrList<stuSTcpPackage>* GetSendPackages(){return &m_SendPackage;};

protected:
	DWORD m_ValidWord;//是否有效的标记字
	SLock m_Lock;
	STcpServerBase *m_pServer;//指向帧听服务类的指针
	SSocket *m_pSocket;//会话SOCKET
	SPtrList<stuSTcpPackage> m_RecvPackage;//接收到的数据包
	SPtrList<stuSTcpPackage> m_SendPackage;//待发送的数据包
	SString m_sLoginAttr;//登录属性,如: act=login;guesttype=htys.ca8110.steady;
};

//////////////////////////////////////////////////////////////////////////
// 名    称:  CTcpClientBase
// 作    者:  邵凯田
// 创建时间:  2011-11-8 19:41
// 描    述:  TCP通讯客户端服务基类
//////////////////////////////////////////////////////////////////////////
class STcpServerBase : public STcpCommBase, public SService
{
public:
	friend class STcpServerSession;

	STcpServerBase();
	virtual	~STcpServerBase();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  启动服务
	// 作    者:  邵凯田
	// 创建时间:  2011-11-8 19:41
	// 参数说明:  @port表示端口,@ip表示服务端IP地址
	// 返 回 值:  true表示服务启动成功,false表示服务启动失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool Start(int port,SString ip="");

	////////////////////////////////////////////////////////////////////////
	// 描    述:  停止服务
	// 作    者:  邵凯田
	// 创建时间:  2011-11-8 19:41
	// 参数说明:  void
	// 返 回 值:  true表示服务停止成功,false表示服务停止失败
	//////////////////////////////////////////////////////////////////////////
	virtual bool Stop();

	////////////////////////////////////////////////////////////////////////
	// 描    述:  添加数据到发送队列，在发送完成后释放pPackage对象
	// 作    者:  邵凯田
	// 创建时间:  2011-11-10 12:40
	// 参数说明:  @pPackage待发送报文
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	void AddToSend(stuSTcpPackage *pPackage);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  检索接收队列中的报文
	// 作    者:  邵凯田
	// 创建时间:  2011-11-10 21:32
	// 参数说明:  @pSession为引用的会话指针
	// 返 回 值:  stuSTcpPackage*
	//////////////////////////////////////////////////////////////////////////
	stuSTcpPackage* SearchRecvPackage(STcpServerSession* &pSession);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  通过报文头字符串中的act属性检索接收队列中的报文
	// 作    者:  邵凯田
	// 创建时间:  2011-11-10 21:32
	// 参数说明:  @act表示待查的报文
	//            @pSession为引用的会话指针
	// 返 回 值:  stuSTcpPackage*
	//////////////////////////////////////////////////////////////////////////
	stuSTcpPackage* SearchRecvPackage(SString act,STcpServerSession* &pSession);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  通过报文类型检索接收队列中的报文
	// 作    者:  邵凯田
	// 创建时间:  2011-11-10 21:32
	// 参数说明:  @wFrameType表示
	//            @pSession为引用的会话指针
	// 返 回 值:  stuSTcpPackage*
	//////////////////////////////////////////////////////////////////////////
	stuSTcpPackage* SearchRecvPackage(WORD wFrameType,STcpServerSession* &pSession);

	////////////////////////////////////////////////////////////////////////
	// 描    述:  登录回调虚函数
	// 作    者:  邵凯田
	// 创建时间:  2011-11-11 18:56
	// 参数说明:  @ip登录客户端的IP
	//            @port登录客户端的端口
	//            @sLoginHead登录字符串
	// 返 回 值:  true表示允许登录,false表示拒绝登录
	//////////////////////////////////////////////////////////////////////////
	virtual bool OnLogin(SString ip,int port,SString &sLoginHead){return true;};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  新会话回调虚函数
	// 作    者:  邵凯田
	// 创建时间:  2012-6-1 11:56
	// 参数说明:  @pSession为新创建的会话实例
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	virtual void OnNewSession(STcpServerSession *pSession){};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  删除会话的回调虚函数
	// 作    者:  邵凯田
	// 创建时间:  2013-3-21 10:07
	// 参数说明:  @pSession为即将将删除的会话实例
	// 返 回 值:  void
	//////////////////////////////////////////////////////////////////////////
	virtual void OnDeleteSession(STcpServerSession *pSession){};

	////////////////////////////////////////////////////////////////////////
	// 描    述:  会话线程接收到报文后的回调虚函数，派生类通过此函数处理即时消息
	// 作    者:  邵凯田
	// 创建时间:  2011-11-11 13:47
	// 参数说明:  @pSession为会话实例指针，可以通过指针向对端发送数据
	//            @pPackage为刚接收到的数据包
	// 返 回 值:  true表示已经处理完毕，此报文可以释放了，false表示未处理，此报文应放入接收队列
	//////////////////////////////////////////////////////////////////////////
	virtual bool OnRecvFrame(STcpServerSession *pSession,stuSTcpPackage *pPackage)=0;

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取当前服务中对应的会话数量
	// 作    者:  邵凯田
	// 创建时间:  2012-2-15 14:58
	// 参数说明:  void
	// 返 回 值:  int
	//////////////////////////////////////////////////////////////////////////
	inline int GetSessionCount(){return m_Sessions.count();};

	//////////////////////////////////////////////////////////////////////////
	// 描    述:  取第idx个会话实例指针
	// 作    者:  邵凯田
	// 创建时间:  2012-4-5 15:07
	// 参数说明:  @idx为会话序号，从0开始
	// 返 回 值:  STcpServerSession*
	//////////////////////////////////////////////////////////////////////////
	inline STcpServerSession* GetSession(int idx){return m_Sessions[idx];};

	inline void SessionsLock(){m_Sessions.lock();};

	inline void SessionsUnLock(){m_Sessions.unlock();};

	inline SPtrList<STcpServerSession>* GetSessionPtr(){return &m_Sessions;};

protected:
	
	////////////////////////////////////////////////////////////////////////
	// 描    述:  服务端帧听线程
	// 作    者:  邵凯田
	// 创建时间:  2011-11-8 19:41
	// 参数说明:  this
	// 返 回 值:  NULL
	//////////////////////////////////////////////////////////////////////////
	static void* ThreadListen(void* lp);


	////////////////////////////////////////////////////////////////////////
	// 描    述:  服务端会话线程
	// 作    者:  邵凯田
	// 创建时间:  2011-11-10 22:20
	// 参数说明:  this
	// 返 回 值:  NULL
	//////////////////////////////////////////////////////////////////////////
	static void* ThreadService(void* lp);

private:
	SString m_sServerIp;//服务器帧听IP，空表示全部IP地址帧听
	int m_iServerPort;//服务器端口号
	SSocket m_Socket;//服务端帧听用SOCKET
	SPtrList<STcpServerSession> m_Sessions;//会话
};

#endif//__SKT_TCPSERVER_BASE_H__
